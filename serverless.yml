# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: emiyaconsulting
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: todo-rest-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: todo-rest-api
frameworkVersion: "4"

plugins:
    - serverless-offline

provider:
    name: aws
    region: us-west-2
    stage: "dev"
    runtime: nodejs22.x
    memorySize: 128
    timeout: 30
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource:
              - arn:aws:dynamodb:us-west-2:{ID}:table/Item
              - arn:aws:dynamodb:us-west-2:{ID}:table/User

functions:
    app:
        handler: dist/index.handler
        events:
            - httpApi:
                  path: /
                  method: GET
    getItems:
        handler: dist/index.handler
        description: Get all items
        events:
            - httpApi:
                  path: /items
                  method: GET
    createItem:
        handler: dist/index.handler
        description: Create a single item
        events:
            - httpApi:
                  path: /item
                  method: POST
    updateItem:
        handler: dist/index.handler
        description: Update a single item
        events:
            - httpApi:
                  path: /item
                  method: PATCH
    getItemById:
        handler: dist/index.handler
        description: Get a single item by ID
        events:
            - httpApi:
                  path: /item/{id}
                  method: GET
    deleteItem:
        handler: dist/index.handler
        description: Flag a single item as deleted
        events:
            - httpApi:
                  path: /item
                  method: DELETE
    getUsers:
        handler: dist/index.handler
        description: Get all users
        events:
            - httpApi:
                  path: /users
                  method: GET
    createUser:
        handler: dist/index.handler
        description: Create a single user
        events:
            - httpApi:
                  path: /user
                  method: POST
    updateUser:
        handler: dist/index.handler
        description: Update a single user
        events:
            - httpApi:
                  path: /user
                  method: PATCH
    getUserById:
        handler: dist/index.handler
        description: Get a single user by ID
        events:
            - httpApi:
                  path: /user/{id}
                  method: GET
    deleteUser:
        handler: dist/index.handler
        description: Flag a single user as deleted
        events:
            - httpApi:
                  path: /user
                  method: DELETE

resources:
    Resources:
        Category:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: Item
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
        Product:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: User
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
